/*
 * @title: Debug
 * @description: simple debug tool
 * @author: Thorsten Kober
 * @email: info@flashdesignory.com
 */
 
var Debug = (function(window) {

	var _debug = true;

	return{
		getDebug: function(){
			return _debug;
		},
		setDebug: function(value){
			_debug = value;
		},
		log: function(channel, message){
			if(!_debug) return;

			if(window.console) {
				try {
					console.log(channel + ": " + message);
				} catch(e) {
					//do something smart here..
				}
			}
		}
	};
})(window);
var Utils = (function(window, document){
	var _debugId = "Utils";
	var _isIE;
	var _ieVersion;
	var _isMobile;
	var _isIphone;
	var _isIpad;

	return {
		addListener:function(_obj, _type, _function, _capture){
			if(document.addEventListener){
				_obj.addEventListener(_type, _function, _capture);	
			}else if(document.attachEvent){
				_obj.attachEvent('on' + _type, _function);	
			}else{
				_obj['on' + _type] = _function;	
			}
		},
		removeListener:function(_obj, _type, _function){
			if(document.removeEventListener){
				_obj.removeEventListener(_type, _function);	
			}else if(document.detachEvent){
				_obj.detachEvent('on' + _type, _function);	
			}
		},
		getEventTarget:function(_event){
			if(window.event != null) return window.event.srcElement;
			else return _event.currentTarget;
		},
		preventDefault:function(_event){
			if(window.event != null) window.event.returnValue = false;
			else _event.preventDefault();

		},
		dispatchEvent:function(_obj, _type){
			var e = null;
			if(document.dispatchEvent){
				e = document.createEvent('HTMLEvents');
				e.initEvent(_type, true, true);
				_obj.dispatchEvent(e);
			}else{
				e = document.createEventObject();
				_obj.fireEvent('on' + _type, e);
			}
		},
		formatTime: function(seconds){
			seconds = Math.round(seconds);
			minutes = Math.floor(seconds / 60);
			minutes = (minutes >= 10) ? minutes : "0" + minutes;
			seconds = Math.floor(seconds % 60);
			seconds = (seconds >= 10) ? seconds : "0" + seconds;
			return minutes + ":" + seconds;
		},
		getDateCodedImage:function(data, defaultImage) {
		    var date = new Date();
		    var image = defaultImage;
			var i = 0, l = data.length;

			for (; i < l; i++) {
				if ( date >= data[i].date ) {
					image = data[i].image;
				}
			}
			return image;
		},
		isMobile:function(){
			if(_isMobile == undefined){
				var a = navigator.userAgent;
				if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))){
					_isMobile = true;
				} else {
					_isMobile = false;
				}
			}
			return _isMobile;
		},
		isIPhone:function(){
			if(_isIphone == undefined){
				if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))){
					_isIphone = true;
				} else {
					_isIphone = false;
				}
			}
			return _isIphone;
		},
		isIPad:function(){
			if(_isIpad == undefined){
				if((navigator.userAgent.match(/ipad/i))){
					_isIpad = true;
				} else {
					_isIpad = false;
				}
			}
			return _isIpad;
		},
		isIE:function(){
			if(_isIE == undefined){
				var ua = window.navigator.userAgent;
	            if (ua.indexOf("MSIE ") > 0 || ua.indexOf("Trident") > 0){
	            	_isIE = true;
	            }else{
	            	_isIE = false;
            	}
			}
            return _isIE;
		},
		getIEVersion:function(){
			if(_ieVersion == undefined){
				var ua = navigator.userAgent;
		        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");

		        if (ua.indexOf("MSIE ") > 0){
		        	if (re.exec(ua) != null)
		            _ieVersion = parseFloat(RegExp.$1);
		        }
			}

			return _ieVersion;
		},
		getMovieReference:function(id){
			if(_isIE == undefined){
				Utils.isIE();
			}
			
			if (_isIE) {
				return window[id];
			} else {
				return document[id];
			}
		},
		removeClass:function(element, value){
			if(element){
				if(element.classList){
					var classes = element.classList;
					classes.remove(value);
				}
			}
		},
		addClass:function(element, value){
			if(element){
				if(element.classList){
					var classes = element.classList;
					if(!classes.contains(value)){
						classes.add(value);
					}
				}
			}
		},
		getBreakpoint:function(){
			var div = document.getElementById("breakpoints");
			var tag = window.getComputedStyle(div,":after").getPropertyValue("content");

			if(_isIE == undefined){
				Utils.isIE();
			}

			if(tag){
				if (_isIE) {
					tag = tag.replace(/"/g,"");
				}else{
					tag = tag.replace(/"/g,""); 
			   		tag = tag.replace(/(^')|('$)/g, '');
				}
			}else{
				tag = "NaN";
			}
				 		   
		    return parseInt(tag);
		},
		getClosest:function (elem, selector){
		    var firstChar = selector.charAt(0);
		    for (; elem && elem !== document; elem = elem.parentNode){
		        if (firstChar === '.') {
		            if (elem.classList.contains( selector.substr(1))){
		                return elem;
		            }
		        }
		        if (firstChar === '#'){
		            if (elem.id === selector.substr(1)){
		                return elem;
		            }
		        } 
		        if ( firstChar === '['){
		            if (elem.hasAttribute( selector.substr(1, selector.length - 2))){
		                return elem;
		            }
		        }
		        if (elem.tagName.toLowerCase() === selector){
		            return elem;
		        }
		    }
		    return false;
		},
		shuffle:function(array){
		    for(var j, x, i = array.length; i; j = Math.floor(Math.random() * i), x = array[--i], array[i] = array[j], array[j] = x);
		    return array;
		},
		getParameterByName:function(name){
		    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
		    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
		        results = regex.exec(location.search);
		    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
		},
		getParam: function( str, sname ){
		  var sval = "";
		  params = str.split("&");
		    for (var i=0; i<params.length; i++)
		       {
		         temp = params[i].split("=");
		         if ( [temp[0]] == sname ) { sval = temp[1]; }
		       }
		  return sval;
		}
	}
})(window, document);

if (!window.getComputedStyle) {
	window.getComputedStyle = function(el, pseudo) {
		this.el = el;
		this.getPropertyValue = function(prop) {
			var re = /(\-([a-z]){1})/g;
			if (prop == 'float') prop = 'styleFloat';
			if (re.test(prop)) {
				prop = prop.replace(re, function () {return arguments[2].toUpperCase();});
			}
			return el.currentStyle[prop] ? el.currentStyle[prop] : null;
		}
		return this;
	}
}
var Browser = (function(){
	var _debugId = "Browser";
	var _window, _html, _body, _document, _content, _wrapper;
	var _orientationChanged = false;
	var _orientation;
	var _windowWidth, _windowHeight, _windowRatio;
	//check for end of resizing 
	var _resizeTime = new Date(1, 1, 2000, 12,00,00);
	var _resizeTimeOut = false;
	var _resizeDelta = 200;
	var _isResizing = false;
	var _background;
	var _backgroundRatio = 1280/1024;

	function addListeners(){
		_window.bind('resize', handleOnResize);
	}

	function handleOnResize(event){
		//Debug.log(_debugId, "handleOnResize()");
		_isResizing = true;
		_windowWidth = _window.width();
		_windowHeight = _window.height();
		_windowRatio = _windowWidth / _windowHeight;

		if(_windowWidth >= _windowHeight){
			_orientation = "landscape";
		}else{
			_orientation = "portrait";
		}

	    resizeBackground();

		_resizeTime = new Date();
	    if (_resizeTimeOut === false) {
	        _resizeTimeOut = true;
	        setTimeout(checkEndOfResize, _resizeDelta);
	    }

	    _orientationChanged = false;
	}

	function resizeBackground(){
		_body.css('overflow', 'hidden');
		var viewportWidth = _window.width();
		var viewportHeight = _window.height();
		_body.css('overflow', 'auto');

		var newWidth, newHeight, leftOffset, topOffset;

		newWidth = viewportWidth;
        newHeight = Math.round(newWidth/_backgroundRatio);
		_background.width(newWidth);
        _background.height(newHeight);

        if(newHeight < viewportHeight){
        	newHeight = viewportHeight;
            newWidth = Math.round(newHeight*_backgroundRatio);
            _background.width(newWidth);
            _background.height(newHeight);
        }

        leftOffset = -Math.round((newWidth-viewportWidth)/2);
        topOffset = -Math.round((newHeight-viewportHeight)/2);
		_background.css({"margin-left":leftOffset + "px", "margin-top":topOffset});
	}

	function checkEndOfResize() {
	    if (new Date() - _resizeTime < _resizeDelta) {
	        setTimeout(checkEndOfResize, _resizeDelta);
	    } else {
	        _resizeTimeOut = false;
	        _isResizing = false;
	    }               
	}

	return {
		init:function(){
			Debug.log(_debugId, "init()");

			_window = $(window);
			_html = $('html');
			_body = $('body');
			_document = $(document);
			_background = $('#browser-page-background');
			
			$('img').on('dragstart', function(event) { event.preventDefault(); });

            addListeners();
            handleOnResize();
		}
	}

})();
var Overlay = (function(){
	var _debugId = "Overlay";
	var _redirect = "../?autoplay=false"
	var _isMobile;

	//youtube
	var _youtubeId = "";
	var _youtbeDivId = "youtbe-player";
	var _youtubePlayer;
	var _closeButton, _overlay;
	var _autoplay;

	function addListeners(){
		_closeButton.bind('click', hideVideo);
	}

	function showVideo(event){
		Debug.log(_debugId, "showVideo()");
		addPlayer();
	}

	function hideVideo(event){
		Debug.log(_debugId, "hideVideo()");
		removePlayer();

		window.location.href = _redirect;
	}

	function addPlayer(){
		Debug.log(_debugId, "addPlayer()");

		_youtubePlayer = new YT.Player(_youtbeDivId, {
	        height: '100%',
	        width: '100%',
	        videoId: _youtubeId,
			playerVars: {  /*'html5': 1, */'autoplay': 1, 'controls': 1,'autohide':1,'wmode':'opaque', 'showinfo' : 0, 'rel' : 0 },
	        events: {
	          'onReady': onPlayerReady,
	          'onStateChange': onPlayerStateChange
	        }
	    });

	    if(_isMobile){
	    	$("html, body").scrollTop(0);
	    }
	}

	function onPlayerReady(event){
		Debug.log(_debugId, "onPlayerReady()");
		if(!_isMobile){
			event.target.playVideo();
		}
    }

    function onPlayerStateChange(event){
	   	Debug.log(_debugId, "onPlayerStateChange(" + event.data + ")");
	   	if(event.data == 0){
	   		if(!_isMobile){
				_closeButton.trigger("click");
			}
	   	}
   }

	function removePlayer(){
		if(_youtubePlayer){
			try{
				_youtubePlayer.destroy();
			}catch(e){
				Debug.log(_debugId, "an error has occured removing the player: " + e + ")");
			}
		}
	}

	function disableVideo(){
		if(_youtubePlayer.getPlayerState){
			if(_youtubePlayer.getPlayerState() == 1){
				_youtubePlayer.pauseVideo();
			}
		}
	}

	return {
		setYoutubeId:function(value){
			_youtubeId = value;
		},
		init:function(){
			Debug.log(_debugId, "init()");

			_isMobile = Utils.isMobile();

			_closeButton = $('#overlay-close');
			_overlay = $('#overlay');

            addListeners();
            setTimeout(showVideo, 1000);
		}
	}
})();
var Touch = (function(){
	var _debugId = "Touch";
	var _window;
	var _trigger = document;
	var _prevX, _prevY, _currentX, _currentY;
	var _buffer = 80;

	function addListeners(){
		Debug.log(_debugId, "addListeners()");
		if ('ontouchstart' in window){
			Utils.addListener(document, "touchstart", onTouchStart, false);
		} else {
			Utils.addListener(_body, "mousedown", onMouseDown, false);
		}
	}

	function onMouseDown(event){
		//Debug.log(_debugId, "onMouseDown()");
		Utils.removeListener(_trigger, "mousedown", onMouseDown);
		var position = getPosition(event);
		_prevX = position.x;
		_prevY = position.y;
		Utils.addListener(document, "mouseup", onMouseUp, false);
	};

	function onMouseUp(event){
		//Debug.log(_debugId, "onMouseUp()");
		Utils.removeListener(document, "mouseup", onMouseUp);
		var position = getPosition(event);
		_currentX = position.x;
		_currentY = position.y;
		calculate();
		Utils.addListener(_trigger, "mousedown", onMouseDown, false);
	};

	function onTouchStart(event){
		//Debug.log(_debugId, "onTouchStart()");
		Utils.removeListener(_trigger, "touchstart", onTouchStart);
		var position = getPosition(event);
		_prevX = position.x;
		_prevY = position.y;
		Utils.addListener(document, "touchend", onTouchEnd, false);
		Utils.addListener(document, "touchmove", onTouchMove, false);
	};

	function onTouchMove(event){
		var position = getPosition(event);
		_currentX = position.x;
		_currentY = position.y;
	}

	function onTouchEnd(event){
		//Debug.log(_debugId, "onTouchEnd()");
		Utils.removeListener(document, "touchend", onTouchEnd);
		Utils.removeListener(document, "touchmove", onTouchMove, false);
		calculate();
		Utils.addListener(_trigger, "touchstart", onTouchStart, false);
	};

	function calculate(){
		var diffX = (_prevX - _currentX);
		var diffY = (_prevY - _currentY);

		if(_currentX == null || _currentY == null) return;
		
		if ( Math.abs( diffX ) > Math.abs( diffY ) ) {
	        if ( diffX > 0 ) {
	            Debug.log(_debugId, "swipe left");
	            if(Math.abs(diffX) > _buffer) _window.trigger("swipe-left");
	        } else {
	            Debug.log(_debugId, "swipe right");
	            if(Math.abs(diffX) > _buffer) _window.trigger("swipe-right");
	        }                       
	    } else {
	        if ( diffY > 0 ) {
	            if(Math.abs(diffY) > _buffer){
	            	Debug.log(_debugId, "swipe up: " + diffY + ", " + _prevY + ", " + _currentY);
	            	_window.trigger("swipe-up");
	            } 
	        } else { 
	            if(Math.abs(diffY) > _buffer){
	            	Debug.log(_debugId, "swipe down:  " + diffY + ", " + _prevY + ", " + _currentY);
	            	_window.trigger("swipe-down");
	            }
	        }                                                                 
	    }
	    
	    _prevX = null;
	    _prevY = null;
	    _currentX = null;
	    _currentY = null;
	}

	function getPosition(event){
		var position = {};
		
		if(event.touches){
			position.x = event.touches[0].pageX;
			position.y = event.touches[0].pageY;
		}else{
			if(window.event != null){
				position.x = event.clientX;
				position.y = event.clientY;
			} else {
				position.x = event.pageX;
				position.y = event.pageY;
			}
		}

		return position;
	}

	return {
		init:function(){
			Debug.log(_debugId, "init()");
			_window = $(window);
			_document = $(document);
			_body = document.getElementsByTagName('body')[0];
			addListeners();
		}
	}
})();
var Animator = (function(){
	var _debugId = "Animator";

	var _fps = 18;
	var _animations = [];

	function loadImage(id, source){
		Debug.log(_debugId, "loadImage(" + id + ", " + source + ")");
		var element = new Image();
		element.id = id;

		for(var i = 0; i<_animations.length; i++){
			if(_animations[i].id == id){
				_animations[i].image = element;
			}
		}

		element.onload = function() {
			onLoadSuccess(this.id);
			this.onload = this.onreadystatechange = null;
		};

		element.onerror = function() {
			onLoadError(this.id);
			this.onload = this.onreadystatechange = null;
		};

		element.onreadystatechange = function() {
			
			if(this.readyState == 'complete' || this.readyState == "loaded") {
				onLoadSuccess(this.id);
				this.onload = this.onreadystatechange = null;
			}
		};

		element.src = source;
	}

	function onLoadSuccess(id) {
		Debug.log(_debugId, "onLoadSuccess(" + id + ")");

		for(var i = 0; i<_animations.length; i++) {
			if(_animations[i].id == id) {
				_animations[i].isLoaded = true;
				_animations[i].spriteWidth = _animations[i].image.width;
				_animations[i].spriteHeight = _animations[i].image.height;

				if(_animations[i].fn != null) {
					_animations[i].fn();
				}
			}
		}
	};

	function onLoadError(id) {
		Debug.log(_debugId, "onLoadError(" + id + ")");
	};

	function animate(obj){
		var element = document.getElementById(obj.div);

		if(obj.currentFrame < obj.totalFrames){

			obj.currentFrame++;

			if(obj.currentXPos >= (obj.spriteWidth-obj.frameWidth)){
				obj.currentXPos = 0;
				obj.currentYPos += obj.frameHeight;
			}else{
				obj.currentXPos += obj.frameWidth;
			}
		}else{
			obj.currentXPos = 0;
			obj.currentYPos = 0;

			if(obj.loop){
				obj.currentFrame = 1;
			}else{
				Debug.log(_debugId, obj.id + " animation done");
				clearInterval(obj.animationLoop);

				if(obj.fn != null){
					obj.fn();
				}

				if(obj.showLastFrame){
					element.style.display = "block";
					obj.showLastFrame = false;
				}else{
					element.style.display = "none";
				}

				return;
			}
		}

		//Debug.log(_debugId,"animate(" + obj.id + " currentFrame: " + obj.currentFrame + ", xPos: " + obj.currentXPos + ", yPos: " + obj.currentYPos + ")");
		var image=element.getElementsByTagName("img")[0];
		image.style.left = -obj.currentXPos + "px";
		image.style.top = -obj.currentYPos + "px";

		if(obj.events.length > 0){
			if(obj.events[obj.currentFrame]){
				obj.events[obj.currentFrame]();
			}
		}
	}

	return {
		setFramesPerSecond:function(value){
			_fps = value;
		},
		getIsRunning:function(){
			var isRunning = false;

			for(var i = 0; i<_animations.length; i++) {
				if(_animations[i].isRunning){
					isRunning = true;
				}
			}

			return isRunning;
		},
		reset:function(){
			for(var i = 0; i<_animations.length; i++){
				var target = _animations[i];
				var element = document.getElementById(target.div);
				element.style.display = "none";
			}
		},
		addAnimation:function(id, div, source, width, height, frames, loop, callback){
			Debug.log(_debugId, "addAnimation(" + id + ", " + div + ", " + source + ", " + width + ", " + height + ", " + frames + ", " + loop +  ")");

			for(var i = 0; i<_animations.length; i++){
				if(_animations[i].id == id){
					Debug.log(_debugId, "animation " + id + " already exists");
					if(_animations[i].isLoaded){
						Debug.log(_debugId, "source already loaded..");
						if(callback){
							Debug.log(_debugId, "found callback..");
							callback();
						}
					}
					return;
				}
			}

			_animations.push({id:id, div:div, src:source, frameWidth:width, frameHeight:height, totalFrames:frames, loop:loop, fn:callback, isLoaded:false, events:[]});
			loadImage(id, source);
		},
		overwriteAnimation:function(id, source, width, height, frames){
			Debug.log(_debugId, "overwriteAnimation(" + id + ", " + source + ", " + width + ", " + height + ", " + frames  + ")");
		
			for(var i = 0; i<_animations.length; i++){
				if(_animations[i].id == id){
					Debug.log(_debugId, "animation " + id + " found");
					_animations[i].source = source;
					_animations[i].width = width;
					_animations[i].height = height;
					_animations[i].frames = frames;
					loadImage(id, source);
					return;
				}
			}
		},
		addEvent:function(id, frame, callback){
			Debug.log(_debugId, "addEvent(" + id + ", " + frame + ", " + callback + ")");

			for(var i = 0; i<_animations.length; i++){
				if(_animations[i].id == id){
					_animations[i].events[frame] = callback;
				}
			}
		},
		startAnimation:function(id, loop, callback, showLastFrame){
			Debug.log(_debugId, "startAnimation(" + id + ", " + loop + ")");
			for(var i = 0; i<_animations.length; i++){
				if(_animations[i].id == id){
					_animations[i].currentFrame = 1;
					_animations[i].currentXPos = 0;
					_animations[i].currentYPos = 0;
					_animations[i].showLastFrame = showLastFrame;
					_animations[i].loop = loop;
					_animations[i].fn = callback;
					_animations[i].isRunning = true;
					var target = _animations[i];
					var element = document.getElementById(target.div);
					element.style.display = "block";
					var img = element.getElementsByTagName("img")[0];
					img.setAttribute('src', target.src);
					img.style.left = target.currentXPos + "px";
					img.style.top = target.currentYPos + "px";
					img.style.visibility = "visible";
					target.animationLoop = setInterval(function(){animate(target)}, (1000 / _fps));
				}
			}
		},
		resetAnimation:function(id){
			for(var i = 0; i<_animations.length; i++){
				if(_animations[i].id == id){
					var target = _animations[i];
					var element = document.getElementById(target.div);
					//element.style.display = "none";
					var img = element.getElementsByTagName("img")[0];
					img.setAttribute('src', '');
					img.style.left = target.currentXPos + "px";
					img.style.top = target.currentYPos + "px";
					img.style.visibility = "hidden";
				}
			}
		},
		stopAnimation:function(id){
			for(var i = 0; i<_animations.length; i++){
				if(_animations[i].id == id){
					var target = _animations[i];
					target.showLastFrame = false;
					target.isRunning = false;
					var element = document.getElementById(target.div);
					element.style.display = "none";
					clearInterval(_animations[i].animationLoop);
				}
			}
		},
		stopAll:function(){
			Debug.log(_debugId, "stopAll()");
			for(var i = 0; i<_animations.length; i++){
				var target = _animations[i];
				target.showLastFrame = false;
				target.isRunning = false;
				var element = document.getElementById(target.div);
				element.style.display = "none";
				clearInterval(_animations[i].animationLoop);
			}
		},
		numAnimations:function(){
			return _animations.length;
		}
	}
})();
var Verification = (function(){
	return {
		anyFieldsEmpty: function(value){
			var _isEmpty = false;

			for(var i = 0; i<value.length; i++){
				if(value[i].val() == ""){
					_isEmpty = true;
				}
			};

			return _isEmpty;
		},
		fieldEmpty: function(value){
			if(value.val() == ""){
				return true;
			} else {
				return false;
			}
		},
		anyDefaultSelected: function(value){
			var _isDefault;

			for(var i = 0; i<value.length; i++){
				if(value[i].val() == value[i].find("option:first").val()){
					_isDefault = true;
				}
			};

			return _isDefault;
		},
		optionSelected: function(value){
			return value.is(':checked');
		},
		match:function(value1, value2){
			if(value1.val() === value2.val()){
				return true;
			} else {
				return false;
			}
		},
		validEmail: function(value) {
			var regex  = /^\s*[\w\-\+_]+(\.[\w\-\+_]+)*\@[\w\-\+_]+\.[\w\-\+_]+(\.[\w\-\+_]+)*\s*$/;
		    return String(value).search (regex) != -1;
		},
		validZipCode: function(value){
			var regex = /(^\d{5}$)|(^\d{5}-\d{4}$)/;
		    return regex.test(value);
		},
		validPostalCode: function(value){
			var regex = /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ]( )?\d[ABCEGHJKLMNPRSTVWXYZ]\d$/;
		    return regex.test(value);
		},
		validZipPostalCode: function(value){
			var regex = /(^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ]( )?\d[ABCEGHJKLMNPRSTVWXYZ]\d$)|(^\d{5}(-\d{4})?$)/;
		    return regex.test(value);
		},
		validAge : function(age, month, day, year){
			Debug.log("Verification", "validAge(" + age + ", " + month + ", " + day + ", " + year);
			var currentDate = new Date();

			var month = parseInt(month);
			var day = parseInt(day);
			var year = parseInt(year);
			var age = parseInt(age);

			var userDate;

			if(month > 0 && day > 0 && year > 0){
				userDate = new Date(year+age, month-1, day);
				if(currentDate.getTime() >= userDate.getTime()){
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}
	}
})();
var EmailForm = (function(){
	var _debugId = "Form";
	var _body;
	var _checkbox, _checkboxTrigger;
	var _toggled;
	var _emailField, _firstNameField, _lastNameField;
	var _fields;
	var _submitButton;
	var _legacyMode = false;
	var _requestURL = "salesforce/send_data.php"
	var _isProcessing = false;
	var _firstName, _lastName, _email;
	var _preloader;
	var _overlay, _closeButton;
	var _overlayMessage;
	var _resetInterval;
	var _delay = 5000;

	var _errorMessages = [{id: "firstname-signup", message:"Please enter your first name"},
						  {id: "lastname-signup", message: "Please enter your last name"},
						  {id: "email-signup", message: "Please enter a valid email"}]

	var _responseMessages = [
		{
			id: "success",
			title: "THANK YOU FOR SIGNING UP!",
			message:"WE WILL SEND YOU THE LATEST INFORMATION ON LEX/OS SOON."
		},
		{
			id: "duplicate",
			title: "DUPLICATE!",
			message: "THE SUBMITTED EMAIL ADDRESS IS ALREADY REGISTERED."
		},
		{
			id: "error",
			title: "ERROR!",
			message:"WE ARE SORRY, BUT AN ERROR HAS OCCURRED. PLEASE TRY AGAIN LATER."
		}
	];

	function addListeners(){
		_checkboxTrigger.bind('click', toggleCheckbox);
		_submitButton.bind('click', handleOnClick);
		_closeButton.bind('click', hideOverlay);

		for (var i = 0; i < _fields.length; i++) {
			var $field = _fields[i];

			$field.bind('change', handleOnChange);
			$field.bind('blur', handleOnChange);
			$field.bind('focus', handleOnFocus);
		}
	}

	function removeListeners(){
		_checkboxTrigger.unbind('click', toggleCheckbox);
		_submitButton.unbind('click', handleOnClick);
		_closeButton.unbind('click', hideOverlay);

		for (var i = 0; i < _fields.length; i++) {
			var $field = _fields[i];

			$field.unbind('change', handleOnChange);
			$field.unbind('blur', handleOnChange);
			$field.unbind('focus', handleOnFocus);
		}
	}

	function handleOnChange(e) {
		var $this = $(this);

		verifyInput($this);
	}

	function validateAllInputs() {
		var results = true;

		for (var i = 0; i < _fields.length; i++) {
			var $field = _fields[i];

			results = verifyInput($field)
			// if (!verifyInput($field)) {
			// 	return false;
			// }
		}

		return results;
	}

	var validInputs = {email: false, first_name: false, last_name: false};

	function verifyInput($input) {
		var valid = true;
		var name = $input.attr('name');
		var value = $input.val();

		switch (name) {
			case 'email':
				if (Verification.fieldEmpty($input) || !Verification.validEmail(value)) {
					// we have a bad email field.
					//console.log('bad email with value', value);

					updateFormField($input, "invalid");
					$input.val(getErrorMessage("email-signup"));

					valid = false;
					validInputs.email = false;
				} else {
					validInputs.email = true;
				}
				break;
			case 'first-name':
				if (Verification.fieldEmpty($input) || isErrorMessage(value)) {
					// we have an empty name
					updateFormField($input, "invalid");
					$input.val(getErrorMessage("firstname-signup"));

					valid = false;
					validInputs.first_name = false;
				} else {
					validInputs.first_name = true;
				}
				break;
			case 'last-name':
				if (Verification.fieldEmpty($input) || isErrorMessage(value)) {
					// we have an empty name
					updateFormField($input, "invalid");
					$input.val(getErrorMessage("lastname-signup"));
					valid = false;
					validInputs.last_name = false;
				} else {
					validInputs.last_name = true;
				}
				break;
		}

		var enableSubmit = true;

		$.each(validInputs, function(ey, value) {
			//console.log(key, value);
			if (!value) {
				enableSubmit = false;
				return;
			}
		});
		//console.log('enableSubmit', enableSubmit, '_toggled', _toggled);

		if (enableSubmit && _toggled) {
			_submitButton.addClass("valid").removeClass("invalid");
		} else {
			_submitButton.addClass("invalid").removeClass("valid");
		}

		return valid;
	}

	function toggleCheckbox(event){
		_toggled  = !_toggled;
		_checkbox.prop("checked", _toggled);

		validateAllInputs();

		Debug.log(_debugId, "toggleCheckbox(" + _toggled + ")");
	}

	function handleOnFocus(event){
		var $this = $(this);
		var currentVal = $this.val();

		if ($this.hasClass("invalid")) {
			$this.val("");
			$this.removeClass('invalid');
		}
	}

	function handleOnClick(event){
		Debug.log(_debugId, "handleOnClick()");

		if (validateAllInputs()) {
			//console.log('all fields valid!');
			submitForm();
		}

		Utils.preventDefault(event);
	}

	function updateFormField(field, type){
		Debug.log(_debugId, "UpdateFormField(" + field.attr('id') + ", " + type + ")");
		switch(type){
			case "valid":
				field.removeClass("invalid").addClass("valid");
				break;
			case "invalid":
				field.removeClass("valid").addClass("invalid");
				break;
			case "reset":
				field.removeClass("valid invalid");
				break;
		}
	};

	// function verify(){
	// 	if(Verification.anyFieldsEmpty(_fields)){
	// 		Debug.log(_debugId, "not all fields are filled out...");
	// 		_submitButton.addClass("invalid").removeClass("valid");
	// 		return;
	// 	}else{
	// 		for(var i = 0; i<_fields.length; i++){
	// 			var value = _fields[i].val();
	// 			if(isErrorMessage(value)){
	// 				_submitButton.addClass("invalid").removeClass("valid");
	// 				return;
	// 			}
	// 			if(value == undefined){
	// 				_submitButton.addClass("invalid").removeClass("valid");
	// 				return;
	// 			}
	// 		}
	// 		if(!_toggled){
	// 			Debug.log(_debugId, "checkbox is not selected...");
	// 			_submitButton.addClass("invalid").removeClass("valid");
	// 			return;
	// 		}else{
	// 			_submitButton.addClass("valid").removeClass("invalid");
	// 		}
	// 		if(!Verification.validEmail(_emailField.val())){
	// 			_submitButton.addClass("invalid").removeClass("valid");
	// 			return;
	// 		}
	// 	}
	// }

	function submitForm(){
		_email = _emailField.val();
		_firstName = _firstNameField.val();
		_lastName = _lastNameField.val();
		Debug.log(_debugId, "submitForm(" + _email + ", " + _firstName + ", " + _lastName + ")");
		var data = {
			first_name: _firstName,
			last_name: _lastName,
			email:_email
		}

		showPreloader();
		_isProcessing = true;

		$.ajax({
			type: "POST",
			url: _requestURL,
			data: data,
			success: function(data) {
				var success = Utils.getParam(data, 'success');
				var error   = Utils.getParam(data, 'error');
				var messageType;
				if(success === "true"){
					Debug.log(_debugId, "submission was ok");
					EmailForm.reset();
					messageType = "success";
				} else if (success === "false" && error === "duplicate") {
					Debug.log(_debugId, "duplicate has occurred");
					messageType = "duplicate";
				} else {
					Debug.log(_debugId, "error has occurred");
					messageType = "error";
				}

				setTimeout(function(){
					hidePreloader();
					showMessage(messageType);
					showOverlay();
				},3000)

				_isProcessing = false;
			}
		});
	}

	function showMessage(id){
		var title, message;
		for(var i = 0; i<_responseMessages.length; i++){
			if(_responseMessages[i].id == id){
				title = _responseMessages[i].title;
				message = _responseMessages[i].message;
			}
		}

		_overlayMessage.html(title + "<br/><br/>" + message);
	}

	function showOverlay(){
		_body.css("position", "fixed");
		_overlay.fadeIn('fast');

		_resetInterval = setInterval(function(){
			clearInterval(_resetInterval);
			hideOverlay();
		}, _delay);
	}

	function hideOverlay(){
		_body.css("position", "relative");
		_overlay.fadeOut('fast');
		clearInterval(_resetInterval);
	}

	function showPreloader(){
		Debug.log("Sections", "showPreloader()");
		_body.css("position", "fixed");
		_preloader.fadeIn('fast');
		Animator.startAnimation("Overlay-Preloader", true);
	};

	function hidePreloader(){
		Debug.log("Sections", "hidePreloader()");
		_body.css("position", "relative");
		_preloader.fadeOut('fast');
		Animator.stopAnimation("Overlay-Preloader");
	};

	function getErrorMessage(id){
		var message;

		for(var i = 0; i<_errorMessages.length; i++){
			if(_errorMessages[i].id == id){
				message = _errorMessages[i].message;
			}
		}

		return message;
	}

	function isErrorMessage(message){
		var temp = false;

		for(var i = 0; i<_errorMessages.length; i++){
			if(_errorMessages[i].message == message){
				Debug.log(_debugId, _errorMessages[i].message + ", " + message)
				temp = true;
			}
		}

		return temp;
	}

	return {
		reset:function(){
			_toggled = false;
			_checkbox.prop("checked", _toggled);
			_firstName = "";
			_lastName = "";
			_email = "";
			toggleCheckbox();
			for(var i = 0; i<_fields.length; i++){
				_fields[i].val("");
				// updateFormField(_fields[i], "invalid");
			}

			_submitButton.addClass("invalid").removeClass("valid");
		},
		enable:function(){
			Debug.log(_debugId, "enable()");
			addListeners();
		},
		disable:function(){
			Debug.log(_debugId, "disable()");
			removeListeners();
		},
		closeOverlay:function(){
			hideOverlay();
			hidePreloader();
		},
		setErrorMessage:function(id, value){
			Debug.log(_debugId, "setErrorMessage(" + id + ", " + value + ")");
			for(var i = 0; i<_errorMessages.length; i++){
				if(_errorMessages[i].id == id){
					_errorMessages[i].message = value;
				}
			}
		},
		setResponseMessage:function(id, title, value){
			Debug.log(_debugId, "setResponseMessage(" + id + ", " + title + ", " + value + ")");
			for(var i = 0; i<_responseMessages.length; i++){
				if(_responseMessages[i].id == id){
					_responseMessages[i].title = title;
					_responseMessages[i].message = value;
				}
			}
		},
		init:function(){
			Debug.log(_debugId, "init()");

			_body = $('body');
			_checkbox = $('#checkbox-signup');
			_checkboxTrigger = $('#checkbox-trigger');
			_emailField = $('#email-signup');
			_firstNameField = $('#firstname-signup');
			_lastNameField = $('#lastname-signup');
			_fields = [_emailField, _firstNameField, _lastNameField];
			_submitButton = $('#signup-form-submit');
			_preloader = $('#overlay-preloader');
			_overlay = $('#overlay-form');
			_closeButton = $('#overlay-message-header-close');
			_overlayMessage = $('#overlay-message-text');

			/* check for old IE*/
	        if($('html').hasClass("lt-ie9")){
	        	_legacyMode = true;
	        }

	        EmailForm.reset();
		}
	}
})();
var Site = (function(){
	var _debugId = "Site";
	var _window, _html, _body, _document, _content, _wrapper;
	var _orientationChanged = false;
	var _isIE = false;
	var _windowWidth, _windowHeight, _windowRatio;
	var _contentMinHeight;
	//check for end of resizing
	var _resizeTime = new Date(1, 1, 2000, 12,00,00);
	var _resizeTimeOut = false;
	var _resizeDelta = 200;
	var _isResizing = false;
	//breakpoints
	var _breakpoint;
	//references
	var _backgrounds;
	//var _backgroundRatio = 1280/1024;
	var _backgroundRatio = 1400/900;
	//states
	var _isMobile, _oldIE;
	//language
    var _languageField, _currentLanguage, _currentCountry, _languageFieldMobile;
    var _localizables;
    //scrolling
    var _currentIndex = -1;
    var _currentSection;
    var _currentDiv;
    var _sections;
    var _totalSections;
    var _direction;
    var _navigationButtons, _navigationVisible;
    var _navigationClicked = false;
    var _menuToggle, _headerNav;
    var _menuBreakpoint = 1020;
    var _newsBreakpoint = 1100;
    var _menuOpen = false;
    var _useCSSAnimations = false;
    var _tweenTime = 1000;
    var _gsTweenTime = 1;
    var _scrollResetTime = 1500;
    var _downArrow, _upArrow;
    var _downArrowSmall, _upArrowSmall;
    var _autohideHeader = false;

    var _headerNavList;
    var _menuAnimationTimeout;

    /// Home Page Elements
    var _homeAnimatedIn = false;
    var _homePageLogoInner, _homePageLogoInnerBreakWidth;
    var _homeLogoResized = false;
    var _homePageLogoSpriteWidth = 958;
    var _homePageLogoSidePadding = 20;
    var _homeSloganTop, _homeSloganBottom;
    var _homeSloganTopST, _homeSloganBottomST;

    var _header, _headerHeight;
    var _footer, _footerHeight;
    var _sectionContents;

    var _currentSectionContent;
    var _prevIndex;

    var _rotateScreenDiv;
    var _rotateScreenVisible = false;

    //mobile
    var _languageMobileOverlay;
    var _languageMobileTrigger;
    var _languageMobileFlags;

    //youtube
	var _youtubeId = "";
	var _youtbeDivId = "youtbe-player";
	var _youtubePlayer;
	var _closeButton, _overlay;
	var _autoplay = true;
	var _disableScroll = false;
	var _playButton;
	var _homeButton;
	var _isFullscreen = false;

	//sub-sections
	var _aboutNavigationButtons,_currentAboutSection,_aboutSections,_aboutTitles,_aboutBackgrounds;
	var _currentAboutIndex = 0;
	var _investorsNavigationButtons,_currentInvestorsSection,_investorsSections,_investorsTitles,_investorsBackgrounds;
	var _currentInvestorsIndex = 0;
	var _newsNavigationButtons,_newsSections;
	var _currentNewsSection = 0;

	//investors
	var _quoteURL = "files/php/quote.php";
	var _quoteData = {};

    //deeplink
    var _title, _deeplink;
    var _deeplinkData = [{index:0, deeplink:"home", title:"Home"},
    					 {index:1, deeplink:"about", title:"About"},
    					 {index:2, deeplink:"news", title:"News"},
    					 {index:3, deeplink:"investors", title:"Investors"},
    					 {index:4, deeplink:"lex-os", title:"Lex/OS"},
    					 {index:5, deeplink:"signup", title:"Signup"}];

	function addListeners(){
		Debug.log(_debugId, "addListeners()");
		_downArrow.bind('click', scrollDown);
		_upArrow.bind('click', scrollUp);
		_downArrowSmall.bind('click', scrollDown);
		_upArrowSmall.bind('click', scrollUp);
		_languageField.bind('change', handleLanguageSelected);
		_closeButton.bind('click', hideVideo);
		_playButton.bind('click', showVideo);
		_menuToggle.bind('click', toggleMenu);
		_homeButton.bind('click', goHome);

		var i;

		if(typeof window.orientation === 'undefined') {
			if(window.matchMedia){
				var mqOrientation = window.matchMedia("(orientation: portrait)");
			    mqOrientation.addListener(function() { handleOnOrientationChange(); });
			}else{
				_window.bind('orientationchange', handleOnOrientationChange);
			}

			_window.bind('resize', handleOnResize);

		} else {
		  _window.bind('orientationchange', handleOnOrientationChange);
		}

   		_window.bind('DOMMouseScroll', handleOnScroll);
		_window.bind('mousewheel', handleOnScroll);

		_window.bind('swipe-up', handleSwipeUp);
		_window.bind('swipe-down', handleSwipeDown);

		_window.bind('focus', handleOnFocus);
		_window.bind('blur', handleOnBlur);

		_window.bind('webkitfullscreenchange mozfullscreenchange fullscreenchange', handleFullscreenchange);

		Touch.init();

		if(_isMobile){
   			handleOnOrientationChange();
   		}

   		for(i = 0; i<_navigationButtons.length; i++){
			$(_navigationButtons[i]).bind('click', handleNavigationClicked);
		}

		for(i = 0; i<_aboutNavigationButtons.length; i++){
			$(_aboutNavigationButtons[i]).bind('click', handleAboutNavigationClicked);
		}

		for(i = 0; i<_investorsNavigationButtons.length; i++){
			$(_investorsNavigationButtons[i]).bind('click', handleInvestorsNavigationClicked);
		}

		for(i = 0; i<_newsNavigationButtons.length; i++){
			$(_newsNavigationButtons[i]).bind('click', handleNewsNavigationClicked);
		}

		_languageMobileOverlay.bind('click', hideOverlay);
		_languageMobileTrigger.bind('click', showOverlay);
		for(i = 0; i<_languageMobileFlags.length; i++){
			$(_languageMobileFlags[i]).bind('click', handleMobileFlagSelected);
		}

   		$.address.change(function(event){
			_deeplink = event.pathNames[0];
			Debug.log(_debugId, "address.change(" + _deeplink + ")");

    		if(Utils.getParameterByName("autoplay") != ""){
    			//trying this out...
    			window.history.pushState({foo: "lexcorp"}, document.title, removeURLVars());
    		}

			scrollToPage(findPageIndex(_deeplink));
		});
	}

	function handleFullscreenchange(event){
		_isFullscreen = !_isFullscreen;
		Debug.log(_debugId, "handleFullscreenchange(" + _isFullscreen + ")");

		if(_isFullscreen){
			if(_videoWasPlaying){
				playVideo();
			}
		}else{
			disableVideo();
		}
	}

	function handleOnFocus(event){
		Debug.log(_debugId, "handleOnFocus()");
		if(!_isResizing){
			handleOnResize();
		}

		//if(_youtubePlayer){
			//hideVideo();
		//}
	}

	function handleOnBlur(event){
		Debug.log(_debugId, "handleOnBlur(" + event.target + ")");
		//disableVideo();
	}

	function handleOnOrientationChange(event){
		Debug.log(_debugId, "handleOnOrientationChange()");

		_orientationChanged = true;
		setTimeout(handleOnResize, 250);
	}

	function handleOnResize(event){
		//Debug.log(_debugId, "handleOnResize()");
		_isResizing = true;
		_windowWidth = _window.width();
		_windowHeight = _window.height();
		_windowRatio = _windowWidth / _windowHeight;

		if(_windowWidth >= _windowHeight){
			_orientation = "landscape";
		}else{
			_orientation = "portrait";
		}

		// if(_isMobile){
		// 	if(!Utils.isIPad()){
		// 		if(_orientation == "portrait"){
		// 			_body.css("position", "relative");
		// 		    _rotateScreenDiv.hide();
		// 		}else{
		// 			_body.css("position", "fixed");
		// 			_rotateScreenDiv.show();
		// 		}
		// 	}
		// }

		setBreakpoint();

		_headerHeight = _header.height();
	    _footerHeight = _footer.height();

	    if( _windowWidth < ( _homePageLogoSpriteWidth + _homePageLogoSidePadding*2 ) )
	    {
	    	var scaleRatio = _windowWidth / ( _homePageLogoSpriteWidth + _homePageLogoSidePadding*2 );
	    	var widthDifference = _windowWidth - ( _homePageLogoSpriteWidth + _homePageLogoSidePadding*2 );
	    	TweenMax.set( _homePageLogoInner, { scale:scaleRatio, x:widthDifference*0.5+_homePageLogoSidePadding } );

	    	_homeLogoResized = true;
	    }
	    else if ( _homeLogoResized )
	    {
	    	TweenMax.set( _homePageLogoInner, { scale:1, x:0 } );
	    	_homeLogoResized = false;
	    }

	    if (_isMobile) {
	    	currentOrientation();
	    }

	    resizeImages();
		resizeDivs();

		_resizeTime = new Date();
	    if (_resizeTimeOut === false) {
	        _resizeTimeOut = true;
	        setTimeout(checkEndOfResize, _resizeDelta);
	    }

	    _orientationChanged = false;
	}

	function checkEndOfResize() {
	    if (new Date() - _resizeTime < _resizeDelta) {
	        setTimeout(checkEndOfResize, _resizeDelta);
	    } else {
	        _resizeTimeOut = false;
	        _isResizing = false;
	    }
	}

	function setBreakpoint(){
		var temp = Utils.getBreakpoint();
	    if(temp != _breakpoint){
	    	var prevBreakpoint = _breakpoint;
	    	_breakpoint = temp;
	    	Debug.log(_debugId, "_breakpoint: " + _breakpoint + ", " + prevBreakpoint);

	    	if(_breakpoint < _menuBreakpoint){
		    	if( prevBreakpoint >= _menuBreakpoint){
		    		//toggleMenu();
		    		_headerNav.css("display", "none");
					_headerNavList.removeClass("open").addClass("closed");
					_menuToggle.removeClass("toggled");
		    	}
		    	_navigationVisible = false;
		    }else{
		    	_headerNav.css("display", "table");
				_headerNavList.removeClass("closed").removeClass("open");
		    	_navigationVisible = true;
		    }
		    if(_breakpoint >= _newsBreakpoint){
		    	if(_currentNewsSection != 0){
		    		$(_newsNavigationButtons[0]).trigger('click');
		    	}
		    }
	    }
	}

	var currentOrientation = function() {
	  // Use screen.availHeight as screen height doesn't change when keyboard displays.
	  if(screen.availHeight > screen.availWidth){
	    $("html").addClass('portrait').removeClass('landscape');
	  } else {
	    $("html").addClass('landscape').removeClass('portrait');
	  }
	}

	function resizeDivs(){
		var newDocumentMinHeight;
		var newContentHeight;
		var windowHeight = _window.height();

		if(_currentDiv){
			newContentHeight = $(_currentDiv).height();
		} else {
			newContentHeight = windowHeight
		}

		if(newContentHeight< windowHeight){
			newContentHeight = windowHeight;
		} else if(newContentHeight > _contentMinHeight){
			newDocumentMinHeight = newContentHeight;
		}else{
			newDocumentMinHeight = _contentMinHeight;
		}

		//Debug.log(_debugId, "id: " + _currentDiv.attr("id") + ", newContentHeight: " + newContentHeight + ", _contentMinHeight: " + _contentMinHeight + ", windowHeight: " + windowHeight + ", newDocumentMinHeight: " + newDocumentMinHeight);

		_wrapper.css({"min-height" : newDocumentMinHeight + "px"});
		_content.css({"min-height" : newDocumentMinHeight + "px"});
	}

	function resizeImages(){
		_body.css('overflow', 'hidden');
		var viewportWidth = _window.width();
		//var viewportHeight = _wrapper.height();
		_body.css('overflow', 'auto');

		var viewportHeight;

		var newWidth, newHeight, leftOffset, topOffset;
		var background, section, content;
		var heights = [];
		var wasInvisible = false;
		var sectionBody, sectionModule;

		for(var i = 0; i<_sections.length; i++){
			section = $(_sections[i]);
			if(!section.is(':visible')){
				section.css("display", "block");
				wasInvisible = true;
			}
			content = $(_sectionContents[i]);
			if(_currentDiv){
				sectionBody = _currentDiv.find(".section-body.active");
				if(sectionBody.length > 0){
					sectionModule = sectionBody.find(".section-module");
					height = sectionBody.height() + parseInt(sectionBody.css("margin-top")) + _footer.height() + parseInt(_currentSectionContent.css("top"));
				}else{
					height = (content.outerHeight() + content.position().top + _footerHeight);
				}
			}else{
				height = (content.outerHeight() + content.position().top + _footerHeight);
			}
			
			//Debug.log(_debugId, "height: " + height + ", window height: " + _windowHeight + ", content min height: " + _contentMinHeight);
			if(height < _contentMinHeight) height = _contentMinHeight;
			if(height < _windowHeight) height = _windowHeight;
			section.css("height", height + "px");
			heights.push(height);
			if(wasInvisible){
				section.css("display", "none");
				wasInvisible = false;
			}
		}

		for(var i = 0; i<_backgrounds.length; i++){
			viewportHeight = heights[i];
			background = $(_backgrounds[i]);
			newWidth = viewportWidth;
	        newHeight = Math.round(newWidth/_backgroundRatio);
			background.width(newWidth);
	        background.height(newHeight);

	        if(newHeight < viewportHeight){
	        	newHeight = viewportHeight;
	            newWidth = Math.round(newHeight*_backgroundRatio);
	            background.width(newWidth);
	            background.height(newHeight);
	        }

	        leftOffset = -Math.round((newWidth-viewportWidth)/2);
	        topOffset = -Math.round((newHeight-viewportHeight)/2);
			background.css({"margin-left":leftOffset + "px", "margin-top":topOffset});
		}
	}

	function handleAboutNavigationClicked(event){
		event.preventDefault();	

		var $this = $(this);
		var nextId = $this.attr("data-page-id");
		var nextIndex;
		var i, temp;

		if(nextId == _currentAboutSection){
			return;
		}else{
			for(i = 0; i<_aboutNavigationButtons.length; i++){
				temp = $(_aboutNavigationButtons[i]);
				if(temp.attr('data-page-id') == nextId){
					nextIndex = i;
					temp.removeClass("inactive").addClass("active");
				}else{
					temp.removeClass("active").addClass("inactive");
				}
			};
			for(i = 0; i<_aboutSections.length; i++){
				temp = $(_aboutSections[i]);
				if(i == nextIndex){
					temp.removeClass("inactive").addClass("active");
					_currentAboutSection = temp;
					_currentAboutIndex = i;
				} else {
					temp.removeClass("active").addClass("inactive");
				}
			}
			for(i = 0; i<_aboutTitles.length; i++){
				temp = $(_aboutTitles[i]);
				if(i == nextIndex){
					temp.removeClass("inactive").addClass("active");
				} else {
					temp.removeClass("active").addClass("inactive");
				}
			}
			for(i = 0; i<_aboutBackgrounds.length; i++){
				temp = $(_aboutBackgrounds[i]);
				if(i == nextIndex){
					temp.removeClass("inactive").addClass("active");
				} else {
					temp.removeClass("active").addClass("inactive");
				}
			}

			if(!_navigationClicked && !_disableScroll) setTimeout(function(){handleOnResize();}, 250);//just to make sure
			setTimeout(function(){_disableScroll = false;}, 1000);
		}

		Debug.log(_debugId, "handleAboutNavigationClicked(" + nextId + ", " + nextIndex + ")");
	}

	function handleInvestorsNavigationClicked(event){
		event.preventDefault();	

		var $this = $(this);
		var nextId = $this.attr("data-page-id");
		var nextIndex;
		var i, temp;

		if(nextId == _currentInvestorsSection){
			return;
		}else{
			for(i = 0; i<_investorsNavigationButtons.length; i++){
				temp = $(_investorsNavigationButtons[i]);
				if(temp.attr('data-page-id') == nextId){
					nextIndex = i;
					temp.removeClass("inactive").addClass("active");
				}else{
					temp.removeClass("active").addClass("inactive");
				}
			};
			for(i = 0; i<_investorsSections.length; i++){
				temp = $(_investorsSections[i]);
				if(i == nextIndex){
					temp.removeClass("inactive").addClass("active");
					_currentInvestorsSection = temp;
					_currentInvestorsIndex = i;
				} else {
					temp.removeClass("active").addClass("inactive");
				}
			}
			for(i = 0; i<_investorsTitles.length; i++){
				temp = $(_investorsTitles[i]);
				if(i == nextIndex){
					temp.removeClass("inactive").addClass("active");
				} else {
					temp.removeClass("active").addClass("inactive");
				}
			}
			for(i = 0; i<_investorsBackgrounds.length; i++){
				temp = $(_investorsBackgrounds[i]);
				if(i == nextIndex){
					temp.removeClass("inactive").addClass("active");
				} else {
					temp.removeClass("active").addClass("inactive");
				}
			}

			if(!_navigationClicked && !_disableScroll) setTimeout(function(){handleOnResize();}, 250);//just to make sure
			setTimeout(function(){_disableScroll = false;}, 1000);
		}

		Debug.log(_debugId, "handleInvestorsNavigationClicked(" + nextId + ", " + nextIndex + ")");
	}

	function handleNewsNavigationClicked(event){
		event.preventDefault();	

		var $this = $(this);
		var nextId = $this.attr("data-page-id");
		var nextIndex;
		var i, temp;

		if(nextId == _currentNewsSection){
			return;
		}else{
			for(i = 0; i<_newsNavigationButtons.length; i++){
				temp = $(_newsNavigationButtons[i]);
				if(temp.attr('data-page-id') == nextId){
					nextIndex = i;
					temp.removeClass("inactive").addClass("active");
				}else{
					temp.removeClass("active").addClass("inactive");
				}
			};
			for(i = 0; i<_newsSections.length; i++){
				temp = $(_newsSections[i]);
				if(i == nextIndex){
					temp.removeClass("inactive").addClass("active");
					_currentNewsSection = temp;
				} else {
					temp.removeClass("active").addClass("inactive");
				}
			}

			if(!_navigationClicked && !_disableScroll) setTimeout(function(){handleOnResize();}, 250);//just to make sure
		}

		Debug.log(_debugId, "handleNewsNavigationClicked(" + nextId + ", " + nextIndex + ")");
	}

	function handleNavigationClicked(event){
		Debug.log(_debugId, "handleNavigationClicked()");	
		event.preventDefault();	

		if(_navigationClicked){
			return;
		}

		if(_menuOpen && !_navigationVisible){
		    toggleMenu();
		}

		var $this = $(this);
		var nextId = $this.attr("data-page-id");
		var nextIndex;

		if(nextId == _currentSection){
			return;
		}else{
			for(var i = 0; i<_navigationButtons.length; i++){
				var temp = $(_navigationButtons[i]);
				if(temp.attr('data-page-id') == nextId){
					nextIndex = i;
				}
			};

			if(nextIndex == 1){
				if(_currentAboutIndex != 0){
					$(_aboutNavigationButtons[0]).trigger("click");
				}
			}else if(nextIndex == 3){
				if(_currentInvestorsIndex != 0){
					$(_investorsNavigationButtons[0]).trigger("click");
				}
			}

			_deeplink = findDeepLink(nextIndex);
			$.address.value(_deeplink);
		}
	}

	function handleOnScroll(event){
		if(_disableScroll) return;

		var currentPosition = _window.scrollTop();
		var windowHeight  = _window.height();
		var documentHeight = _document.height();
		var scrollable = false;
		var scrollAmount;
		var scrollOffset = 1;
		var isOnTop = false;
		var isOnBottom = false;

		if(event.originalEvent.wheelDelta){
			if(_isIE) scrollAmount = event.originalEvent.wheelDelta;
			else scrollAmount = event.originalEvent.wheelDelta/120;
		}else{
			scrollAmount = event.originalEvent.detail/2;
		}

		//Debug.log(_debugId, "handleOnScroll(" + _window.scrollTop() + ", "  + currentPosition + ", " + windowHeight + ", " + documentHeight + ")");

		if(documentHeight == windowHeight){
			scrollable = true;
			isOnTop = true;
			isOnBottom = true;
		}else{
			if(currentPosition == 0){
				//Debug.log(_debugId, "we're at the top: " + currentPosition + ", " + windowHeight + ", " + documentHeight);
				isOnTop = true;
				isOnBottom = false;
				scrollable = true;
			}else if(currentPosition + windowHeight >= documentHeight){
				//Debug.log(_debugId, "we're at the bottom: " + currentPosition + ", " + windowHeight + ", " + documentHeight);
				isOnTop = false;
				isOnBottom = true;
				scrollable = true;
			}else{
				//Debug.log(_debugId, "we're in between: " + currentPosition + ", " + windowHeight + ", " + documentHeight );
				isOnTop = false;
				isOnBottom = false;
				scrollable = false;
			}
		}

		if(scrollable == true){
			if(event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0){
				if(isOnTop){
					if(Math.abs(scrollAmount) >= scrollOffset){
						event.preventDefault();
						scrollUp();
					}
				}
			}else{
				if(isOnBottom){
					if(Math.abs(scrollAmount) >= scrollOffset){
						event.preventDefault();
						scrollDown();
					}
				}
			}
		}
	}

	function getIsSwipable(){
		var currentPosition = _window.scrollTop();
		var windowHeight  = _window.height();
		var documentHeight = _document.height();
		var swipable = false;
		var isOnTop = false;
		var isOnBottom = false;

		if(documentHeight == windowHeight){
			swipable = true;
			isOnTop = true;
			isOnBottom = true;
		}else{
			if(currentPosition <= 0){
				isOnTop = true;
				isOnBottom = false;
				swipable = true;
			}else if(currentPosition + windowHeight >= documentHeight){
				isOnTop = false;
				isOnBottom = true;
				swipable = true;
			}else{
				isOnTop = false;
				isOnBottom = false;
				swipable = false;
			}
		}

		Debug.log(_debugId, "swipable: " + swipable + ", isOnTop: " + isOnTop + ", isOnBottom: " + isOnBottom);
		return {swipable:swipable, isOnTop:isOnTop, isOnBottom:isOnBottom};
	}

	function handleSwipeUp(event){
		var info = getIsSwipable();
		if(info.swipable && info.isOnBottom) scrollDown();
	}

	function handleSwipeDown(event){
		var info = getIsSwipable();
		if(info.swipable && info.isOnTop) scrollUp();
	}

	function scrollUp(){
		if(_navigationClicked) return;
		var temp = _currentIndex - 1;
		if(temp< 0){
			temp = 0;
		}

		Debug.log(_debugId, "scrollUp(" + _currentIndex + ")");

		if(_currentIndex == 1){
			//about section
			var totalAboutSections = _aboutSections.length;
			Debug.log(_debugId, "current about index: " + _currentAboutIndex + ", total about sections: " + totalAboutSections);
			if(_currentAboutIndex > 0){
				var temp = _currentAboutIndex-1;
				$(_aboutNavigationButtons[temp]).trigger("click");
				_disableScroll = true;
			}else{
				_deeplink = findDeepLink(temp);
				$.address.value(_deeplink);
			}
		}else if(_currentIndex == 3){
			//investors section
			var totalInvestorsSections = _investorsSections.length;
			Debug.log(_debugId, "current investors index: " + _currentInvestorsIndex + ", total investors sections: " + totalInvestorsSections);
			if(_currentInvestorsIndex > 0){
				var temp = _currentInvestorsIndex-1;
				$(_investorsNavigationButtons[temp]).trigger("click");
				_disableScroll = true;
			}else{
				_deeplink = findDeepLink(temp);
				$.address.value(_deeplink);
			}
		}else{
			_deeplink = findDeepLink(temp);
			$.address.value(_deeplink);
			//scrollToPage(temp);
		}
	}

	function scrollDown(){
		if(_navigationClicked) return;
		var temp = _currentIndex + 1;
		if(temp > _totalSections-1){
			temp = _totalSections-1;
		}

		Debug.log(_debugId, "scrollDown(" + _currentIndex + ")");

		if(_currentIndex == 1){
			//about section
			var totalAboutSections = _aboutSections.length;
			Debug.log(_debugId, "current about index: " + _currentAboutIndex + ", total about sections: " + totalAboutSections);
			if(_currentAboutIndex < totalAboutSections-1){
				var temp = _currentAboutIndex+1;
				$(_aboutNavigationButtons[temp]).trigger("click");
				_disableScroll = true;
			}else{
				_deeplink = findDeepLink(temp);
				$.address.value(_deeplink);
				//scrollToPage(temp);
			}
		}else if(_currentIndex == 3){
			//investors section
			var totalInvestorsSections = _investorsSections.length;
			Debug.log(_debugId, "current investors index: " + _currentInvestorsIndex + ", total investors sections: " + totalInvestorsSections);
			if(_currentInvestorsIndex < totalInvestorsSections-1){
				var temp = _currentInvestorsIndex+1;
				$(_investorsNavigationButtons[temp]).trigger("click");
				_disableScroll = true;
			}else{
				_deeplink = findDeepLink(temp);
				$.address.value(_deeplink);
				//scrollToPage(temp);
			}
		}else{
			_deeplink = findDeepLink(temp);
			$.address.value(_deeplink);
			//scrollToPage(temp);
		}
	}

	function scrollToPage(index){
		if(_navigationClicked || index == _currentIndex) return;

		var curSectionBackground = $(_backgrounds[_currentIndex]);

		_navigationClicked = true;
		
		var nextIndex = index;
		var nextDiv = $(_sections[index]);
		var nextSectionBackground = $(_backgrounds[nextIndex]);
		var nextSectionContent = $(_sectionContents[nextIndex]);

		if(_currentIndex != -1){
			_direction = ( nextIndex > _currentIndex ) ? "down" : "up";
		}else{
			_direction = "initial";
		}

		scrollToPageStart( nextIndex );

		Debug.log(_debugId, "scrollToPage(from: " + _currentIndex + " to " + index + ", " + _direction + ")");
		Debug.log(_debugId, "current background: " + curSectionBackground.attr("id") + ", next background: " + nextSectionBackground.attr("id"));

		if(_document.height() == _window.height()){
			_body.addClass("not-scrollable");
		}

		updateNavigation(nextIndex);
		enableSection(nextDiv.attr("id"));
		if(_currentDiv) disableSection(_currentDiv.attr("id"));
		nextDiv.show();

		var targetHeight = _window.height();

		switch(_direction){
			case "down":
					TweenMax.to( _currentDiv, _gsTweenTime, { y:-targetHeight, ease:Sine.easeInOut, clearProps:"transform"/*, display:"none"*/, onComplete:animatePageOutComplete.bind(this) });
				    TweenMax.fromTo( nextDiv, _gsTweenTime, { y:targetHeight/*, display:"none"*/ }, { y:0, ease:Sine.easeInOut, clearProps:"transform"/*, display:"block"*/, onComplete:scrollToPageComplete.bind(this) });

					TweenMax.to( curSectionBackground, _gsTweenTime, { y:targetHeight*0.5, ease:Sine.easeInOut, clearProps:"transform" } );
					TweenMax.from( nextSectionBackground, _gsTweenTime, { y:-targetHeight*0.5, ease:Sine.easeInOut, clearProps:"transform" } );
					TweenMax.from( nextSectionContent, _gsTweenTime, { opacity:0, delay:_gsTweenTime*0.5 } );
				break;
			case "up":
					TweenMax.to( _currentDiv, _gsTweenTime, { y:targetHeight, ease:Sine.easeInOut, clearProps:"transform"/*, display:"none"*/, onComplete:animatePageOutComplete.bind(this) });
					TweenMax.fromTo( nextDiv, _gsTweenTime, { y:-targetHeight/*, display:"none"*/ }, { y:0, ease:Sine.easeInOut, clearProps:"transform"/*, display:"block"*/, onComplete:scrollToPageComplete.bind(this) });

					TweenMax.to( curSectionBackground, _gsTweenTime, { y:-targetHeight*0.5, ease:Sine.easeInOut, clearProps:"transform" } );
					TweenMax.from( nextSectionBackground, _gsTweenTime, { y:targetHeight*0.5, ease:Sine.easeInOut, clearProps:"transform" } );
					TweenMax.from( nextSectionContent, _gsTweenTime, { opacity:0, delay:_gsTweenTime*0.5 } );
				break;
			case "initial":
				if(_useCSSAnimations){
					TweenMax.fromTo( nextDiv, _gsTweenTime, { opacity:0, immediateRender:true, onComplete:scrollToPageComplete.bind(this) }, { opacity:1 });
				}else{
					TweenMax.fromTo( nextDiv, _gsTweenTime, { opacity:0, immediateRender:true, onComplete:scrollToPageComplete.bind(this) }, { opacity:1 });
				}
				break;
		}

		if(_autohideHeader){
			if(_direction != "initial"){
				if(_currentIndex == 0){
					TweenMax.to( _header, _gsTweenTime, { y:0, ease:Power3.easeOut });
				}else if(nextIndex == 0){
					TweenMax.to( _header, _gsTweenTime, { y:-_headerHeight, ease:Power3.easeOut });
				}
			}else{
				if(nextIndex != 0){
					TweenMax.to( _header, _gsTweenTime, { y:0, ease:Power3.easeOut });
				}
			}
		}

		//clean stuff up
		if(_currentIndex == 3){
			EmailForm.closeOverlay();
		}
		if(_overlay.is(':visible')) {
			_overlay.hide();
			removePlayer();
		}

		_prevIndex = _currentIndex;
		_currentIndex = nextIndex;
		_currentDiv = nextDiv;
		_currentSection = _currentDiv.attr('id');
		_currentDiv.removeClass("inactive-section").addClass("active-section");
		_currentSectionContent = _currentDiv.find('.section-content');

		//reset classes and let user scroll again
		_resetInterval = setInterval(function(){
			clearInterval(_resetInterval);
			//handleOnResize();
			for(var i = 0; i<_sections.length; i++){
				var temp = $(_sections[i]);
				if(temp.attr('id') != _currentSection){
					temp.attr("class", "site-section inactive-section");
					//temp.css("top", "0px");
				}else{
					temp.attr("class", "site-section active-section");
				}
			}
			if(_document.height() == _window.height()){
				_body.removeClass("not-scrollable");
			}else{
				$("html, body").animate({ scrollTop: "0" });
			}
			_navigationClicked = false;
		}, _scrollResetTime);

		handleOnResize();//just to make sure
	}

	function scrollToPageStart( nextIndex ) {
		Debug.log(_debugId, "scrollToPageStart( next: " + nextIndex + " , current: " + _currentIndex + ")");

		switch( nextIndex )
		{
			case 0:
			    if( _homeAnimatedIn ) break;
				Animator.resetAnimation("TitleAnimation");
				_homeSloganTL.seek(0);
				_homeSloganTL.pause();
				break;
			case 1:
				//$(_aboutNavigationButtons[0]).trigger("click");
				if(_currentIndex == 0 && _currentAboutIndex != 0){
					$(_aboutNavigationButtons[0]).trigger("click");
				}else if(_currentIndex == 2 && _currentAboutIndex != _aboutSections.length-1){
					$(_aboutNavigationButtons[_aboutSections.length-1]).trigger("click");
				}
				break;
			case 2:
				$(_newsNavigationButtons[0]).trigger("click");
				break;
			case 3:
				//$(_investorsNavigationButtons[0]).trigger("click");
				if(_currentIndex == 2 && _currentInvestorsIndex != 0){
					$(_investorsNavigationButtons[0]).trigger("click");
				}else if(_currentIndex == 4 && _currentInvestorsIndex != _investorsSections.length-1){
					$(_investorsNavigationButtons[_investorsSections.length-1]).trigger("click");
				}
				break;
			case 4:
				break;
		}
	}

	function scrollToPageComplete() {
		Debug.log(_debugId, "scrollToPageCompelete(" + _currentIndex + ")");

		//restarting stuff
		switch( _currentIndex )
		{
			case 0:
				_homeButton.css("pointer-events", "none");
				if( _homeAnimatedIn ) break;
				Animator.startAnimation("TitleAnimation", false, null, true);
				_homeSloganTL.restart( true );
				break;
			default:
				_homeButton.css("pointer-events", "auto");
		}

		//error checking - if the user clicks back button too fast
		var deeplink = findDeepLink(_currentIndex);
		if(deeplink != _deeplink){
			_deeplink = deeplink;
			$.address.value(_deeplink);
		}
	}

	function animatePageOutComplete(){
		Debug.log(_debugId, "animatePageOutComplete()");
		$(_sections[_prevIndex]).hide();
	}

	function updateNavigation(nextIndex){
		Debug.log(_debugId, "updateNavigation(" + nextIndex + ")");
		if(nextIndex == 0){
			_upArrow.hide();
			_downArrow.show();
			_upArrowSmall.hide();
			_downArrowSmall.hide();
		}else if(nextIndex == _totalSections-1){
			_upArrow.show();
			_downArrow.hide();
			_upArrowSmall.hide();
			_downArrowSmall.hide();
		}else{
			_upArrow.hide();
			_downArrow.hide();
			_upArrowSmall.show();
			_downArrowSmall.show();
		}

		if(_deeplink == "home"){
			$.address.title(_title);
		}else{
			$.address.title(_title + " :: " + findPageTitle(_deeplink));
		}

		for(var i = 0; i<_navigationButtons.length; i++){
			var temp = $(_navigationButtons[i]);
			if(i == nextIndex){
				temp.removeClass("inactive").addClass("active");
			} else {
				temp.removeClass("active").addClass("inactive");
			}
		}
	}

	function enableSection(id){
		switch(id){
			case "signup":
				EmailForm.reset();
				EmailForm.enable();
				break;
		}
	}

	function disableSection(id){
		switch(id){
			case "signup":
				EmailForm.disable();
				break;
		}
	}

	function handleLanguageSelected(event){
        _currentCountry = $(this).val();
        _currentLanguage = $(this).find('option:selected').text();
        Debug.log(_debugId, "handleLanguageSelected(" + _currentCountry + ", " + _currentLanguage + ")");
  		// var url = window.location.href.split('?')[0];
		// url += '?ulang=' + _currentCountry;
		// window.location.href = url;
			switch(_currentCountry) {
			case 'en_us':
				break;
			case 'it':
				 window.location.href ='it';
				break;
			case 'fr':
				 window.location.href ='fr';
				break;
			case 'de':
				 window.location.href ='de';
				break;
			case 'kr':
				 window.location.href ='kr';
				break;
			case 'uk':
				 window.location.href ='uk';
				break;
			case 'tw':
				 window.location.href ='tw';
				break;
			case 'hk':
				 window.location.href ='hk';
				break;
			case 'br':
				 window.location.href ='br';
				break;
			case 'la':
				 window.location.href ='la';
				break;
			case 'ru':
				 window.location.href ='ru';
				break;
			case 'ar':
				 window.location.href ='ar';
				break;
			case 'ca':
				 window.location.href ='ca';
				break;
			case 'es':
				 window.location.href ='es';
				break;
			case 'au':
				window.location.href = 'au';
				break;
			default:
			}
    }

    function buildDropdown(){
		_languageField.find('option').each(function(){
            var $option = $(this);
            var $country = $option.val();
            if($country == _currentCountry){
            	_languageField.val($country);
            }
        });

        _languageField.chosenImage({disable_search: true, inherit_select_classes:true, width:"100%"});
    }

    function showOverlay(){
    	_languageFieldMobile.fadeIn("fast");
    }

    function hideOverlay(){
    	_languageFieldMobile.fadeOut("fast");
    }

    function handleMobileFlagSelected(event){
    	var location = $(this).attr('data-value');
    	return window.location.href = location;
    }

    function toggleMenu(event){
    	Debug.log(_debugId, "toggleMenu()");
		_menuToggle.toggleClass("toggled");

		if(_menuToggle.hasClass("toggled")){
			_headerNav.css("display", "table");
			clearTimeout(_menuAnimationTimeout);
			_headerNavList.removeClass("closed").addClass("open");
			_menuOpen = true;
		}else{
			_menuOpen = false;
			_menuAnimationTimeout = setTimeout(function(){_headerNav.css("display", "none");},600);
			_headerNavList.removeClass("open").addClass("closed");
		}
	}

    function showVideo(event){
		Debug.log(_debugId, "showVideo()");

		event.preventDefault();

		_disableScroll = true;
		_overlay.fadeIn("fast", handleOverlayVisible);
	}

	function hideVideo(event){
		Debug.log(_debugId, "hideVideo()");
		Animator.resetAnimation("TitleAnimation");

		_disableScroll = false;

		if(_homeSloganTL){
			_homeSloganTL.seek(0);
			_homeSloganTL.pause();
		}
		_overlay.fadeOut("fast", handleOverlayRemoved);
		if(event) event.preventDefault();
	}

	function addPlayer(){
		Debug.log(_debugId, "addPlayer()");

		_youtubePlayer = new YT.Player(_youtbeDivId, {
	        height: '100%',
	        width: '100%',
	        videoId: _youtubeId,
			playerVars: {  /*'html5': 1, */'autoplay': 1, 'controls': 1,'autohide':1,'wmode':'opaque', 'showinfo' : 0, 'rel' : 0 },
	        events: {
	          'onReady': onPlayerReady,
	          'onStateChange': onPlayerStateChange
	        }
	    });

	    if(_isMobile){
	    	$("html, body").scrollTop(0);
	    }
	}

	function onPlayerReady(event){
		Debug.log(_debugId, "onPlayerReady()");
		if(!_isMobile){
			event.target.playVideo();
		}
    }

    function onPlayerStateChange(event){
	   	Debug.log(_debugId, "onPlayerStateChange(" + event.data + ")");
	   	if(event.data == 0){
	   		if(!_isMobile){
				_closeButton.trigger("click");
			}
	   	}
   }

	function removePlayer(){
		if(_youtubePlayer){
			try{
				_youtubePlayer.destroy();
			}catch(e){
				Debug.log(_debugId, "an error has occured removing the player: " + e + ")");
			}
			_youtubePlayer = null;
		}
	}

	function disableVideo(){
		if(_youtubePlayer){
			if(_youtubePlayer.getPlayerState){
				if(_youtubePlayer.getPlayerState() == 1){
					_videoWasPlaying = true;
					_youtubePlayer.pauseVideo();
				}
			}
		}
	}

	function playVideo(){
		if(_youtubePlayer){
			if(_youtubePlayer.getPlayerState() != 1){
				_youtubePlayer.playVideo();
			}
		}
	}

	function handleOverlayVisible(){
		Animator.stopAnimation("TitleAnimation");
		addPlayer();
	}

	function handleOverlayRemoved(){
		removePlayer();
		//Animator.startAnimation("TitleAnimation", false, null, true);
		//_homeSloganTL.restart( true );
	}

    function validateLanguage(value){
    	var _isValid = false;
        _languageField.find('option').each(function(){
            var $option = $(this);
            var $country = $option.val();
            if($country == value){
            	_isValid = true;
            }

        });
        return _isValid;
    }

    function sortDataOn(key, array){
        array.sort(function(a, b) {
            var x = a[key]; var y = b[key];
            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        });
    }

    function findPageIndex(id){
    	var pageIndex = _deeplinkData[0].index;
    	for(var i = 0; i<_deeplinkData.length; i++){
    		if(_deeplinkData[i].deeplink == id){
    			pageIndex = _deeplinkData[i].index;
    		}
    	}
    	//Debug.log(_debugId, "findPageIndex(" + id + ", " + pageIndex + ")");
    	return pageIndex;
    }

    function findDeepLink(index){
    	var deeplink = _deeplinkData[0].deeplink;
    	for(var i = 0; i<_deeplinkData.length; i++){
    		if(_deeplinkData[i].index == index){
    			deeplink = _deeplinkData[i].deeplink;
    		}
    	}
    	//Debug.log(_debugId, "findDeepLink(" + index + ", " + deeplink + ")");
    	return deeplink;
    }

    function findPageTitle(id){
    	var pageTitle = _deeplinkData[0].title;
    	for(var i = 0; i<_deeplinkData.length; i++){
    		if(_deeplinkData[i].deeplink == id){
    			pageTitle = _deeplinkData[i].title;
    		}
    	}

    	//Debug.log(_debugId, "findPageTitle(" + id + ", " + pageTitle + ")");
    	return pageTitle;
    }

    function removeURLVars(){
    	var url = window.location.href.split('?')[0];
    	Debug.log(_debugId, "new url: " + url);
    	return url;
    }

    function goHome(event){
    	Debug.log(_debugId, "goHome()");

    	_deeplink = findDeepLink(0);
		$.address.value(_deeplink);

		if(_menuOpen) toggleMenu();
    }

    function updateQuotes(){
    	Debug.log(_debugId, "updateQuotes()");

    	$.ajax({
			  type: "GET",
			  dataType: "json",
			  url: _quoteURL,
			  success: handleQuotesSuccess,
			  error: handleQuotesError
			});
    }

    function handleQuotesSuccess(data){
		Debug.log(_debugId, "handleQuotesSuccess: " + data['query']['created']);

		var txt = "";

		$.each( data['query']['results']['quote'], function( key, val ) {
			//Debug.log(_debugId, key + ": "  + val);
			txt += key + ": " + val + "<br/>";
		});

		_quoteData = data['query']['results']['quote'];

		$('.stocks-header').fadeOut("slow");
		$('.stocks-body').fadeOut("slow", function(){
			$('#stock-data-ask').html(_quoteData['Ask']);
			$('#stock-data-change').html(_quoteData['Change']);
			$('#stock-data-prevclose').html(_quoteData['PreviousClose']);
			$('#stock-data-dayhigh').html(_quoteData['DaysHigh']);
			$('#stock-data-open').html(_quoteData['Open']);
			$('#stock-data-daylow').html(_quoteData['DaysLow']);
			$('#stock-data-volume').html(commaSeparateNumber(_quoteData['Volume']));
			$('#stock-data-cap').html(_quoteData['MarketCapitalization'])

			$('.stocks-header').fadeIn("slow");
			$('.stocks-body').fadeIn("slow", function(){
				setTimeout(function(){updateQuotes();},(60000*5));
			});
		})
	}

	function handleQuotesError(data){
		Debug.log(_debugId, "handleQuotesError: " + data);

		$.each( data, function( key, val ) {
			Debug.log(_debugId, "key: " + key + ", value: "  + val);
		});
	}

	function commaSeparateNumber(val){
	    while (/(\d+)(\d{3})/.test(val.toString())){
	      val = val.toString().replace(/(\d+)(\d{3})/, '$1'+','+'$2');
	    }
	    return val;
	 }

	return {
		setYoutubeId:function(value){
			_youtubeId = value;
		},
		init:function(){
			Debug.log(_debugId, "init()");

			_window = $(window);
			_html = $('html');
			_body = $('body');
			_document = $(document);
			_wrapper = $('#wrapper');
			_content = $('#content');
			_languageField = $('#language-selector');
			_languageFieldMobile = $('#languageMobileOverlay');
			_header = $('#header');
			_footer = $('#footer');
			_isIE = Utils.isIE();
			_contentMinHeight = parseInt(_content.css("min-height"));
			Debug.log(_debugId, "_contentMinHeight: " + _contentMinHeight);

			/* make sure images can't drag*/
			$('img').on('dragstart', function(event) { event.preventDefault(); });

			/* check if we can use css animations */
			if(Modernizr.cssanimations){
				_useCSSAnimations = true;
			}

			/* check if we should open video overlay*/
			var temp = Utils.getParameterByName("autoplay");
    		if(temp == ""){
    			_autoplay = false;
    		}else{
    			if(temp == false || temp == "false"){
    				_autoplay = false;
    			}
    			//trying this out...
    			window.history.pushState({foo: "lexcorp"}, document.title, removeURLVars());
    		}

    		if(_youtubeId == "" || _youtubeId == undefined){
    			_autoplay = false;
    		}

			/* check country code */
			/*_currentCountry = Utils.getParameterByName("ulang");
			if(!validateLanguage(_currentCountry)){
				_currentCountry = "en_us";
			}*/
			_currentCountry = "en_us";

			/* check if mobile*/
			if(Utils.isMobile()){
	          _body.addClass("mobile");
	          _isMobile = true;
	          currentOrientation();
	        }else{
	          _body.addClass("desktop");
	          _isMobile = false;
	        }

	        /* check for old IE*/
	        if(_html.hasClass("lt-ie9")){
    			_oldIE = true;
    		}else{
    			_oldIE = false;
    		}

	        Debug.log(_debugId,"autoplay: " + _autoplay +  ", country code: " + _currentCountry + ", isMobile: " + _isMobile +  ", oldIE: " + _oldIE);

	        _sections = $('.site-section');
	        _navigationButtons = $('.nav-button');
			_backgrounds = $('.section-background');
			_sectionContents = $('.section-content');

			_localizables = $('.localizable');
			_downArrow = $('#footer-arrow-down');
			_upArrow = $("#footer-arrow-up");
			_downArrowSmall = $('#footer-arrow-down-small');
			_upArrowSmall = $("#footer-arrow-up-small");
			_totalSections = _sections.length;
			_rotateScreenDiv = $('#rotate-overlay');

			_closeButton = $('#overlay-close');
			_overlay = $('#overlay');
			_playButton = $('#buttons-play');

			_menuToggle = $('#menu-toggle');
			_headerNav = $('#header-nav');
			_headerNavList = $('#header-nav ul');
			_homeButton = $('#header-logo');

			//about page
			_aboutNavigationButtons = $('.about-nav-button');
			_aboutSections = $('#about').find('.section-body');
			_aboutTitles = $('#about-page-header').find('h2');
			_aboutBackgrounds = $('#about').find('.sub-section-background');

			//investors page
			_investorsNavigationButtons = $('.investors-nav-button');
			_investorsSections = $('#investors').find('.section-body');
			_investorsTitles = $('#investors-page-header').find('h2');
			_investorsBackgrounds = $('#investors').find('.sub-section-background');

			//news page
			_newsNavigationButtons = $('.news-nav-button');
			_newsSections = $('#news').find('.section-body');

			//mobile 
			_languageMobileOverlay = $('#languageMobileOverlay');
			_languageMobileTrigger = $('.language-selector-mobile');
			_languageMobileFlags = _languageMobileOverlay.find('.language-flag');

			buildDropdown();
            addListeners();

            EmailForm.init();

            /// init for animations
            _homePageLogo = $('#home-page-logo');
            _homePageLogoInner = $('#home-page-logo-inner');
            _homePageLogoInnerBreakWidth = _homePageLogoSpriteWidth;

            _homeSloganTop = $('#home-page-slogan-top');
            _homeSloganTopST = new SplitText( _homeSloganTop, {type:"words,chars"} );

            _homeSloganBottom = $('#home-page-slogan-bottom');
            _homeSloganBottomST = new SplitText( _homeSloganBottom, {type:"words,chars"} );

            _homeSloganTL = new TimelineLite({ paused:true, onComplete:function(){ _homeAnimatedIn = true; } });
            _homeSloganTL.delay( 1.8 );
            _homeSloganTL.add( TweenMax.staggerFromTo( _homeSloganTopST.chars, 1.5, { opacity:0, rotationY:'90deg', transformOrigin:"25% 50%", immediateRender:true }, { opacity:1, rotationY:'0deg', transformOrigin:"25% 50%", ease:Power3.easeOut }, 0.04 ) );
			_homeSloganTL.add( TweenMax.staggerFromTo( _homeSloganBottomST.chars, 1.5, { opacity:0, rotationY:'90deg', transformOrigin:"25% 50%", immediateRender:true }, { opacity:1, rotationY:'0deg', transformOrigin:"25% 50%", ease:Power3.easeOut }, 0.04 ), "-=0.8");

			if(_autohideHeader){
				TweenMax.set( _header, { y:-_header.height() });
			}

			//get quotes
			updateQuotes();

			_deeplink = $.address.pathNames()[0];
			_title = document.title;
			if(_deeplink === undefined){
				Debug.log(_debugId, "no deeplink found...");
				_deeplink = "home";
				scrollToPage(0);

				if(_autoplay){
					_disableScroll = true;

					showVideo();
				}
			} else {
				Debug.log(_debugId, "deeplink found.." + _deeplink);

				var index = findPageIndex(_deeplink);
				scrollToPage(index);

				if(index = 0){
					if(_autoplay){
						showVideo();
					}
				}
			}
		}
	}
})();
